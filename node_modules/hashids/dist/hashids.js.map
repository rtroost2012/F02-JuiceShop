{"version":3,"sources":["../lib/hashids.ts"],"names":[],"mappings":"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","file":"hashids.js","sourcesContent":["type NumberLike = number | bigint\n\nexport default class Hashids {\n  private alphabet: string\n  private seps: string\n  private guards: string\n\n  public constructor(\n    private salt = '',\n    private minLength = 0,\n    alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890',\n    seps = 'cfhistuCFHISTU',\n  ) {\n    if (typeof minLength !== 'number') {\n      throw new TypeError(\n        `Hashids: Provided 'minLength' has to be a number (is ${typeof minLength})`,\n      )\n    }\n    if (typeof salt !== 'string') {\n      throw new TypeError(\n        `Hashids: Provided 'salt' has to be a string (is ${typeof salt})`,\n      )\n    }\n    if (typeof alphabet !== 'string') {\n      throw new TypeError(\n        `Hashids: Provided alphabet has to be a string (is ${typeof alphabet})`,\n      )\n    }\n\n    const uniqueAlphabet = keepUniqueChars(alphabet)\n\n    if (uniqueAlphabet.length < minAlphabetLength) {\n      throw new Error(\n        `Hashids: alphabet must contain at least ${minAlphabetLength} unique characters, provided: ${uniqueAlphabet}`,\n      )\n    }\n\n    /** `alphabet` should not contains `seps` */\n    this.alphabet = withoutChars(uniqueAlphabet, seps)\n    /** `seps` should contain only characters present in `alphabet` */\n    const filteredSeps = onlyChars(seps, uniqueAlphabet)\n    this.seps = shuffle(filteredSeps, salt)\n\n    let sepsLength\n    let diff\n\n    if (\n      [...this.seps].length === 0 ||\n      [...this.alphabet].length / [...this.seps].length > sepDiv\n    ) {\n      sepsLength = Math.ceil([...this.alphabet].length / sepDiv)\n\n      if (sepsLength > [...this.seps].length) {\n        diff = sepsLength - [...this.seps].length\n        this.seps += unicodeSubstr(this.alphabet, 0, diff)\n        this.alphabet = unicodeSubstr(this.alphabet, diff)\n      }\n    }\n\n    this.alphabet = shuffle(this.alphabet, salt)\n    const guardCount = Math.ceil([...this.alphabet].length / guardDiv)\n\n    if ([...this.alphabet].length < 3) {\n      this.guards = unicodeSubstr(this.seps, 0, guardCount)\n      this.seps = unicodeSubstr(this.seps, guardCount)\n    } else {\n      this.guards = unicodeSubstr(this.alphabet, 0, guardCount)\n      this.alphabet = unicodeSubstr(this.alphabet, guardCount)\n    }\n  }\n\n  public encode(numbers: string): string\n  public encode(numbers: NumberLike[]): string\n  public encode(...numbers: NumberLike[]): string\n  public encode(numbers: string[]): string\n  public encode(...numbers: string[]): string\n  public encode<T extends string | NumberLike>(\n    first: T[] | T,\n    ...numbers: T[]\n  ): string {\n    const ret = ''\n\n    if (Array.isArray(first)) {\n      numbers = first\n    } else {\n      // eslint-disable-next-line eqeqeq\n      numbers = [...(first != null ? [first] : []), ...numbers]\n    }\n\n    if (!numbers.length) {\n      return ret\n    }\n\n    if (!numbers.every(isIntegerNumber)) {\n      numbers = numbers.map((n) =>\n        typeof n === 'bigint' || typeof n === 'number'\n          ? n\n          : safeParseInt10(String(n)),\n      ) as T[]\n    }\n\n    if (!(numbers as NumberLike[]).every(isPositiveAndFinite)) {\n      return ret\n    }\n\n    return this._encode(numbers as number[])\n  }\n\n  public decode(id: string): NumberLike[] {\n    if (!id || typeof id !== 'string' || id.length === 0) return []\n    return this._decode(id)\n  }\n\n  /**\n   * @description Splits a hex string into groups of 12-digit hexadecimal numbers,\n   * then prefixes each with '1' and encodes the resulting array of numbers\n   *\n   * Encoding '00000000000f00000000000f000f' would be the equivalent of:\n   * Hashids.encode([0x100000000000f, 0x100000000000f, 0x1000f])\n   *\n   * This means that if your environment supports BigInts,\n   * you will get different (shorter) results if you provide\n   * a BigInt representation of your hex and use `encode` directly, e.g.:\n   * Hashids.encode(BigInt(`0x${hex}`))\n   *\n   * To decode such a representation back to a hex string, use the following snippet:\n   * Hashids.decode(id)[0].toString(16)\n   */\n  public encodeHex(hex: string | bigint): string {\n    switch (typeof hex) {\n      case 'bigint':\n        hex = hex.toString(16)\n        break\n      case 'string':\n        if (!/^[0-9a-fA-F]+$/.test(hex)) return ''\n        break\n      default:\n        throw new Error(\n          `Hashids: The provided value is neither a string, nor a BigInt (got: ${typeof hex})`,\n        )\n    }\n\n    const numbers = splitAtIntervalAndMap(hex, 12, (part) =>\n      parseInt(`1${part}`, 16),\n    )\n    return this.encode(numbers)\n  }\n\n  public decodeHex(id: string) {\n    return this.decode(id)\n      .map((number) => number.toString(16).slice(1))\n      .join('')\n  }\n\n  private _encode(numbers: NumberLike[]): string {\n    let ret: string\n    let alphabet = this.alphabet\n\n    const numbersIdInt = numbers.reduce<number>(\n      (last, number, i) =>\n        last +\n        (typeof number === 'bigint'\n          ? Number(number % BigInt(i + 100))\n          : number % (i + 100)),\n      0,\n    )\n\n    ret = [...alphabet][numbersIdInt % [...alphabet].length]\n    const lottery = ret\n\n    const seps = [...this.seps]\n    const guards = [...this.guards]\n\n    numbers.forEach((number, i) => {\n      const buffer = lottery + this.salt + alphabet\n\n      alphabet = shuffle(alphabet, unicodeSubstr(buffer, 0))\n      const last = toAlphabet(number, alphabet)\n\n      ret += last\n\n      if (i + 1 < numbers.length) {\n        const charCode = last.codePointAt(0)! + i\n        const extraNumber =\n          typeof number === 'bigint'\n            ? Number(number % BigInt(charCode))\n            : number % charCode\n        ret += seps[extraNumber % seps.length]\n      }\n    })\n\n    if ([...ret].length < this.minLength) {\n      const prefixGuardIndex =\n        (numbersIdInt + [...ret][0].codePointAt(0)!) % guards.length\n      ret = guards[prefixGuardIndex] + ret\n\n      if ([...ret].length < this.minLength) {\n        const suffixGuardIndex =\n          (numbersIdInt + [...ret][2].codePointAt(0)!) % guards.length\n        ret = ret + guards[suffixGuardIndex]\n      }\n    }\n\n    const halfLength = Math.floor([...alphabet].length / 2)\n    while ([...ret].length < this.minLength) {\n      alphabet = shuffle(alphabet, alphabet)\n      ret =\n        unicodeSubstr(alphabet, halfLength) +\n        ret +\n        unicodeSubstr(alphabet, 0, halfLength)\n\n      const excess = [...ret].length - this.minLength\n      if (excess > 0) {\n        ret = unicodeSubstr(ret, excess / 2, this.minLength)\n      }\n    }\n\n    return ret\n  }\n\n  public isValidId(id: string): boolean {\n    return [...id].every(\n      (char) =>\n        this.alphabet.includes(char) ||\n        this.guards.includes(char) ||\n        this.seps.includes(char),\n    )\n  }\n\n  private _decode(id: string): NumberLike[] {\n    if (!this.isValidId(id)) {\n      throw new Error(\n        `The provided ID (${id}) is invalid, as it contains characters that do not exist in the alphabet (${this.guards}${this.seps}${this.alphabet})`,\n      )\n    }\n    const idGuardsArray = splitAtMatch(id, (char) => this.guards.includes(char))\n    const splitIndex =\n      idGuardsArray.length === 3 || idGuardsArray.length === 2 ? 1 : 0\n\n    const idBreakdown = idGuardsArray[splitIndex]\n    const idBreakdownArray = [...idBreakdown]\n    if (idBreakdownArray.length === 0) return []\n\n    const [lotteryChar, ...chars] = idBreakdownArray\n    const rest = chars.join('')\n    const idArray = splitAtMatch(rest, (char) => this.seps.includes(char))\n\n    const {result} = idArray.reduce(\n      ({result, lastAlphabet}, subId) => {\n        const buffer = lotteryChar + this.salt + lastAlphabet\n        const nextAlphabet = shuffle(\n          lastAlphabet,\n          unicodeSubstr(buffer, 0, [...lastAlphabet].length),\n        )\n        return {\n          result: [...result, fromAlphabet(subId, nextAlphabet)],\n          lastAlphabet: nextAlphabet,\n        }\n      },\n      {result: [] as NumberLike[], lastAlphabet: this.alphabet},\n    )\n\n    if (this._encode(result) !== id) return []\n    return result\n  }\n}\n\nconst minAlphabetLength = 16\nconst sepDiv = 3.5\nconst guardDiv = 12\n\nexport const keepUniqueChars = (str: string) =>\n  Array.from(new Set(str)).join('')\n\nexport const withoutChars = ([...str]: string, [...without]: string) =>\n  str.filter((char) => !without.includes(char)).join('')\n\nexport const onlyChars = ([...str]: string, [...only]: string) =>\n  str.filter((char) => only.includes(char)).join('')\n\nexport const unicodeSubstr = ([...str]: string, from: number, to?: number) =>\n  str.slice(from, to === undefined ? undefined : from + to).join('')\n\nconst isIntegerNumber = (n: NumberLike | string) =>\n  typeof n === 'bigint' ||\n  (!Number.isNaN(Number(n)) && Math.floor(Number(n)) === n)\n\nconst isPositiveAndFinite = (n: NumberLike) =>\n  typeof n === 'bigint' || (n >= 0 && Number.isSafeInteger(n))\n\nfunction shuffle(alphabet: string, [...salt]: string) {\n  let integer: number\n\n  if (!salt.length) {\n    return alphabet\n  }\n\n  const alphabetChars = [...alphabet]\n\n  for (let i = alphabetChars.length - 1, v = 0, p = 0; i > 0; i--, v++) {\n    v %= salt.length\n    p += integer = salt[v].codePointAt(0)!\n    const j = (integer + v + p) % i\n\n      // swap characters at positions i and j\n    ;[alphabetChars[j], alphabetChars[i]] = [alphabetChars[i], alphabetChars[j]]\n  }\n\n  return alphabetChars.join('')\n}\n\nconst toAlphabet = (input: NumberLike, [...alphabet]: string) => {\n  let id = ''\n\n  if (typeof input === 'bigint') {\n    const alphabetLength = BigInt(alphabet.length)\n    do {\n      id = alphabet[Number(input % alphabetLength)] + id\n      input = input / alphabetLength\n    } while (input > BigInt(0))\n  } else {\n    do {\n      id = alphabet[input % alphabet.length] + id\n      input = Math.floor(input / alphabet.length)\n    } while (input > 0)\n  }\n\n  return id\n}\n\nconst fromAlphabet = ([...input]: string, [...alphabet]: string) =>\n  input\n    .map((item) => {\n      const index = alphabet.indexOf(item)\n      if (index === -1) {\n        const inputString = input.join('')\n        const alphabetString = alphabet.join('')\n        throw new Error(\n          `The provided ID (${inputString}) is invalid, as it contains characters that do not exist in the alphabet (${alphabetString})`,\n        )\n      }\n      return index\n    })\n    .reduce(\n      (carry, index) => {\n        if (typeof carry === 'bigint') {\n          return carry * BigInt(alphabet.length) + BigInt(index)\n        }\n        const value = carry * alphabet.length + index\n        const isSafeValue = Number.isSafeInteger(value)\n        if (isSafeValue) {\n          return value\n        } else {\n          if (typeof BigInt === 'function') {\n            return BigInt(carry) * BigInt(alphabet.length) + BigInt(index)\n          } else {\n            // we do not have support for BigInt:\n            throw new Error(\n              `Unable to decode the provided string, due to lack of support for BigInt numbers in the current environment`,\n            )\n          }\n        }\n      },\n      0 as NumberLike,\n    )\n\nconst splitAtMatch = ([...chars]: string, match: (char: string) => boolean) =>\n  chars.reduce(\n    (groups, char) =>\n      match(char)\n        ? [...groups, '']\n        : [...groups.slice(0, -1), groups[groups.length - 1] + char],\n    [''],\n  )\n\nconst safeToParseNumberRegExp = /^\\+?[0-9]+$/\nconst safeParseInt10 = (str: string) =>\n  safeToParseNumberRegExp.test(str) ? parseInt(str, 10) : NaN\n\n/** note: this doesn't need to support unicode, since it's used to split hex strings only */\nconst splitAtIntervalAndMap = <T>(\n  str: string,\n  nth: number,\n  map: (n: string) => T,\n): T[] =>\n  Array.from<never, T>({length: Math.ceil(str.length / nth)}, (_, index) =>\n    map(str.slice(index * nth, (index + 1) * nth)),\n  )\n"]}